# -*- coding: utf-8 -*-

# Roger - Facial detection
# Joseph - Canny
# Lyndon - Canny line -> smoothing/thickness modifier along lines
# Sabrina - Textures
# Kelsey - Quantizing RGB/HSV


"""CS4476Prj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WGs55cY6plbmUJFE-gipBV8MQNJsHIBL

<center>
    <h1>CS  4476: Fall 2020</h1>
    <h1>Final Project</h1>
    <h3>Sabrina Chua, Kelsey Henson, Joseph Lee, Roger Nhan, Lyndon Puzon
 </h3>
</center>
"""

#export
import numpy as np
np.set_printoptions(threshold=np.inf)
from sklearn.cluster import KMeans
from skimage.color import rgb2hsv, hsv2rgb
from skimage import feature, color, draw
from imageio import imread, imsave
from scipy import ndimage
from typing import Tuple
from PIL import Image
from matplotlib import pyplot as plt
import texture

#export
def quantize_hsv(img: np.ndarray, k: int) -> np.ndarray:
    """
    Compute the k-means clusters for the input image in the hue dimension of the
    HSV space. Replace the hue values with the nearest cluster's hue value. Finally,
    convert the image back to RGB.
    
    Inputs:
        img: Input RGB image with shape H x W x 3 and dtype "uint8"
        k: The number of clusters to use

    Output:
        An RGB image with shape H x W x 3 and dtype "uint8"
    """
    quantized_img = np.zeros_like(img)

    ##########################################################################
    # TODO: Convert the image to HSV. Perform k-means clustering in hue      #
    # space. Replace the hue values in the image with the cluster centers.   #
    # Convert the image back to RGB.                                         #
    ##########################################################################
    
    #Converting image to HSV and retrieving H channels
    image = rgb2hsv(img)
    h,w,_ = image.shape
    hue = image[:,:,0]
    hue = hue.reshape(h*w,1)

    clusters = KMeans(n_clusters=k, random_state=101)
    kmeans = clusters.fit(hue)
    labels = kmeans.predict(hue)

    colors = np.array(kmeans.cluster_centers_)

 
    for row in range(0,len(hue)):
        hue[row] = colors[labels[row]]
    
    hue = hue.reshape(image[:,:,0].shape)

    quantized_img = np.copy(image)
    quantized_img[:,:,0] = hue

    quantized_img = hsv2rgb(quantized_img)
    quantized_img = quantized_img * 255
    quantized_img = quantized_img.astype(np.uint8)
    



    ##########################################################################
    ##########################################################################

    return quantized_img

# Quantize RGB
#export
def quantize_rgb(img: np.ndarray, k: int) -> np.ndarray:
    """
    Compute the k-means clusters for the input image in RGB space, and return
    an image where each pixel is replaced by the nearest cluster's average RGB
    value.

    Inputs:
        img: Input RGB image with shape H x W x 3 and dtype "uint8"
        k: The number of clusters to use

    Output:
        An RGB image with shape H x W x 3 and dtype "uint8"
    """
    quantized_img = np.zeros_like(img)
    

    ##########################################################################
    # TODO: Perform k-means clustering and return an image where each pixel  #
    # is assigned the value of the nearest clusters RGB values.              #
    ##########################################################################
 
    x, y, z = img.shape
    listImg = img.reshape(x*y, z)

    kmeans = KMeans(n_clusters=k, random_state=101).fit(listImg)
    
    centers = kmeans.cluster_centers_.astype(int)
    labels = kmeans.predict(listImg)

    return centers[labels].reshape(x, y, z)

    ##########################################################################
    ##########################################################################
    
    return quantized_img

# Canny
# test

# Smooth/reinforce lines

# Textures
# img_array = imread('hill.jpg')

# fig = plt.figure()
# axes = plt.axes()

# temp = texture.FillColors(img_array, 15)
# image = temp.get_img()
# fitered = texture.median_filter(img_array)

# axes.imshow(fitered)
# plt.show()

#test2

# Blob detection

